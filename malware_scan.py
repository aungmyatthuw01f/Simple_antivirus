import argparse
import os
import requests
import hashlib
import json

API_KEY = 'YOU_API_KEY_HERE'

def get_file_report(resource):
    url = 'https://www.virustotal.com/vtapi/v2/file/report'
    params = {'apikey': API_KEY, 'resource': resource}
    response = requests.get(url, params=params)
    try:
        response.raise_for_status()
        if response.text.strip():
            return response.json()
        else:
            print("No response content available. File may not be in VirusTotal database.")
            return None
    except requests.exceptions.HTTPError as e:
        print(f"HTTP error occurred: {e}")
    except requests.exceptions.JSONDecodeError as e:
        print(f"Invalid JSON response: {e}")
    return None

def scan_file(filepath, detailed):
    hasher = hashlib.md5()
    with open(filepath, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hasher.update(chunk)
    file_hash = hasher.hexdigest()
    result = get_file_report(file_hash)

    if result and result.get('response_code') == 1:
        if result.get('positives', 0) > 0:
            print(f"\033[91m\nMalware detected in file: {filepath}\033[0m")
            print(f"Detected by {result['positives']} engines out of {result['total']}.")
            if detailed:
                print(f"Detection Date: {result.get('scan_date')}")
                print("Detailed Malware Information:")
                print(json.dumps(result.get('scans'), indent=4))
        else:
            print(f"No malware detected in file: {filepath}")
    else:
        print(f"File not recognized by VirusTotal: {filepath}. Consider submitting it for analysis.")

def scan_folder(folder_path, detailed):
    for root, _, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            scan_file(file_path, detailed)

def main():
    parser = argparse.ArgumentParser(description='Scan files and folders for malware using VirusTotal by Yin Yin Kyaw.')
    parser.add_argument('path', type=str, help='Path to the file or folder to scan')
    parser.add_argument('-m', '--detailed', action='store_true', help='Show detailed malware information for detected files')
    args = parser.parse_args()

    if os.path.isfile(args.path):
        scan_file(args.path, args.detailed)
    elif os.path.isdir(args.path):
        scan_folder(args.path, args.detailed)
    else:
        print("The specified path does not exist.")

if __name__ == '__main__':
    main()
